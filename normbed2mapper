#!/usr/bin/perl
BEGIN { unshift @INC,"/home/lees2/pipeline/util/M";}
require "indexwindows.pl";
require "beds.pl";
require "formats.pl";

#Usage
if(@ARGV<2) {print "usage: $0 annotation_file(bed or map) norm.bed [option(bed|map)] > mapper\nOption (bed|map) can be automatically determined if the annotation file has either .bed or .map extension at the end.\n"; exit;}


#Arguments
my ($bedfile1,$bedfile2)=@ARGV;  #bedfile1 : trn, bedfile2 : matchout
if($ARGV[2]) {$option=$ARGV[2];}
else {$option="";}

$within=0;
$windowsize=100;

#parsing bedfile1
if($option eq 'bed') { @bed1=&readbedfile($bedfile1); }
elsif($option eq 'map') {  @bed1=&readmapfile($bedfile1); }
elsif($option ne "") { print "Ambiguous file type option. map or bed?\n"; exit; }
elsif($bedfile1=~/\.bed$/) { @bed1=&readbedfile($bedfile1); }
elsif($bedfile1=~/\.map$/) { @bed1=&readmapfile($bedfile1); }
else {print "Ambiguous file type. map or bed?\n"; exit; }

#print scalar @bed1;  ##DEBUGGING
#&printbed($bed1[0]);

#generate index from bed1
for my $i (@bed1){
 $start_index = &get_windowindex($i->[$START]>0?$i->[$START]:1,$windowsize);
 $end_index = &get_windowindex($i->[$END],$windowsize);

 if($start_index>0) {$start_index--;}  #allow one more window
 $end_index++;

 for my $index ($start_index..$end_index){
  push @{$windows{$i->[$CHR]}[$index]},[@$i];
 }
}


#intersect
$"=":";
open BED2,$bedfile2 or die "Can't open norm.bed\n";;
<BED2>;  #discard header
while(<BED2>){
 chomp;
 next if !/\S/;
 $i=[split/\t/];
 #$i=&read_matchoutline2bed($_);

 $start_index = &get_windowindex($i->[$START],$windowsize);
 $end_index = &get_windowindex($i->[$END],$windowsize);
 
  my %allintersected=();  #to avoid duplicate lines
  for my $index ($start_index..$end_index){
    if($cand_area = $windows{$i->[$CHR]}[$index]){
      for my $area (@$cand_area){
        if(($dist = &beddist($area,$i,3,0)) ne "Inf" && $dist<=$within){
          $allintersected{"@$area"}=1;  #avoid duplicate lines
          #&printmapper($i,$area);
        }
      }
    }
  }

  for my $areastr (keys %allintersected){
    $area=[split/:/,$areastr];
    &printmapper($i,$area);
  }

}
close BED2;