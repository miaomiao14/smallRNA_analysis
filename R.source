library(ggplot2)
library(calibrate)
library(reshape)

# copied from http://stackoverflow.com/questions/6461209/how-to-round-up-to-the-nearest-10-or-100-or-x
roundUp <- function(x, nice=c(1,2,4,5,6,8,10)) {
    if(length(x) != 1) stop("'x' must be of length 1")
    10^floor(log10(x)) * nice[[which(x <= 10^floor(log10(x)) * nice)[[1]]]]
}


plot_lendis2 <- function (input,gt) {

L=read.delim(input,header=F);
#L$V2=L$V2/nf;
#L$V3=L$V3/nf;
ylim_plus=max(L$V2)*1.2;ylim_minus=-max(L$V3)*1.2;
#m=basename(input)
name=paste(input,'.pdf',sep="");
pdf(name);
barplot(L$V2,main=gt,col=4,ylab='number of normalized reads(ppm)',ylim=c(ylim_minus,ylim_plus));
barplot(-L$V3,names.arg=L$V1,col=2,xlab='length (nt)',ylim=c(ylim_minus,ylim_plus),add=TRUE);
dev.off();

name=paste(input,'.ps',sep="");
pdf(name);
barplot(L$V2,main=gt,col=4,ylab='number of normalized reads(ppm)',ylim=c(ylim_minus,ylim_plus));
barplot(-L$V3,names.arg=L$V1,col=2,xlab='length (nt)',ylim=c(ylim_minus,ylim_plus),add=TRUE);
dev.off();


}


plot_paired_lendis2<- function (input,outdir) {

L=read.table(input,header=F)
colnames(L)=c("gt","len","sense","antisense","rank")
L=L[order(L$rank,L$gt,L$len),]
L$rank=as.factor(L$rank)
m1=basename(input)
ylim_plus=max(L$sense,L$antisense)*1.2;ylim_minus=-ylim_plus;
n=length(levels(L$gt))

h=7
w=h*n
pdfname=paste(outdir,"/",m1,'.pdf',sep="");
pdf (pdfname,width=w,height=h)
#layout(matrix(c(1:n), n, 1, byrow = FALSE))
par(mfcol = c(1, n))

for ( i in 1:length(levels(as.factor(L$rank))) )
{
r=levels(L$rank)[i]
df=as.data.frame(lapply(subset(L,as.character(rank)==r),'[',drop=TRUE))
gtname=levels( as.factor(df$gt) )[1]  #a long trip to get the gtname

Lgtx=as.data.frame(lapply(subset(L,gt==gtname),'[',drop=TRUE))
barplot(Lgtx$sense,main=gtname,col=4,ylab='number of normalized reads(ppm)',ylim=c(ylim_minus,ylim_plus));
barplot(-Lgtx$antisense,names.arg=Lgtx$len,col=2,xlab='length (nt)',ylim=c(ylim_minus,ylim_plus),add=TRUE);
}
dev.off();


pdfname=paste(outdir,"/",m1,'.ps',sep="");
pdf (pdfname,width=w,height=h)
#layout(matrix(c(1:n), n, 1, byrow = TRUE))
par(mfcol = c(1, n))
for ( i in 1:length(levels(as.factor(L$rank))) )
{
r=levels(L$rank)[i]
df=as.data.frame(lapply(subset(L,as.character(rank)==r),'[',drop=TRUE))
gtname=levels( as.factor(df$gt) )[1]  #a long trip to get the gtname

Lgtx=as.data.frame(lapply(subset(L,gt==gtname),'[',drop=TRUE))
barplot(Lgtx$sense,main=gtname,col=4,ylab='number of normalized reads(ppm)',ylim=c(ylim_minus,ylim_plus));
barplot(-Lgtx$antisense,names.arg=Lgtx$len,col=2,xlab='length (nt)',ylim=c(ylim_minus,ylim_plus),add=TRUE);
}
dev.off();

}



plot_transposon_abundance_zscore_barplot <- function (tlist,plist,z,nf,nftype,outdir) {
a=read.table(tlist,T)

group=read.table("/home/wangw1/pipeline/common/Zamore.group",F)
colnames(group)=c("transposon","g")

aGroup=merge(a,group,by.x="transposon",all.x=TRUE)
aGroup$g[is.na(aGroup$g)]=4
nf=as.numeric(nf)
aGroup$piRNA=aGroup$piRNA/nf*1000000
aGroupppm=subset(aGroup,select=c("transposon","piRNA","g"))


pp=read.table(plist,F)
colnames(pp)=c("transposon","gt","zscore","ppscore10")

pingponggt=levels(as.factor(pp$gt))[1]
name = strsplit(pingponggt, '\\-')[[1]][1]

aGroupppmpp=merge(aGroupppm,pp,by="transposon")

pdfname=paste(outdir,"/", name,"_trn_abundance_vs_zscore.",nftype,".pdf",sep='')
pdf (pdfname,width=25,height=12)
aGroupppmpp=aGroupppmpp[order(aGroupppmpp$zscore),]
trn=aGroupppmpp$transposon
aGroupppmpp$transposon=sub('FBgn[0-9n]+\\_','',aGroupppmpp$transposon,perl=TRUE)
aGroupppmpp$transposon=sub("FBgnnnnnnnn_","",aGroupppmpp$transposon,perl=TRUE) 
par(mar = c(18, 4, 4, 6) )

tz=formatC(z,digits=4)
m=paste("Ping-Pong Z score for each transposon family in", name,"\n","Ping-Pong Z score for all transposon piRNAs is", tz, sep=' ')
aGroupppmpp$g=as.factor(aGroupppmpp$g)
fcol=c("black","green","red","yellow")

barplot(aGroupppmpp$zscore,border="lightgrey",col=fcol[aGroupppmpp$g],  axes=F, ylab="Z score")
legend(x=1,y=max(aGroupppmpp$zscore,20),legend=c("group1","group2","group3","not in group"),pch=15,col=c("black","green","red","yellow"))

axis(2,tck=0.01, at=seq(-10,max(aGroupppmpp$zscore,20),by=10),las=2)
axis(2, at=1.96, labels="z=1.96",las=2,col.ticks ="red")
abline(h=1.96,col="red",lty=2)

par(mar = c(12, 4, 4, 6),new=T)
fcol=c("black","green","red","yellow")
#barplot(aGroupppmpp$piRNA,col="lightgrey",axes=F,xlab="",ylab="", main=m,ylim=c(0,max(aGroupppmpp$piRNA)),col.lab="blue")
barplot(aGroupppmpp$piRNA,col=fcol[aGroupppmpp$g],axes=F,names=aGroupppmpp$transposon,las=2,xlab="",ylab="", main=m,ylim=c(0,max(aGroupppmpp$piRNA)),col.lab="blue")
axis(4,tck=0.01, ylim=c(0,max(aGroupppmpp$piRNA)),las=2)
mtext(4,text="ppm",line=4)
axis(4, at=500, labels="ppm=500",las=2,col="blue",col.ticks ="blue")
abline(h=500,col="blue",lty=2)

dev.off()

}





plot_transposon_abundance_comparison <- function (input1,input2,nf1,nf2,nftype,outdir) {

group=read.table("/home/wangw1/pipeline/common/Zamore.group",F)
colnames(group)=c("transposon","g")
 
a_table=read.table(input1,T)
b_table=read.table(input2,T)

ab = merge (a_table, b_table, by.x='transposon', by.y='transposon')
abg = merge (ab, group, by.x='transposon', by.y='transposon')

file1=basename(input1)
file2=basename(input2)
#sampleA = strsplit(file1, '\\.')[[1]][1]
#sampleB = strsplit(file2, '\\.')[[1]][1]

file1=sub('\\.transposon\\.list','',file1,perl=TRUE)
file1=sub('Phil\\.SRA\\.','',file1,perl=TRUE)
sampleA=sub('\\.ovary\\.inserts','',file1,perl=TRUE)
file2=sub('\\.transposon\\.list','',file2,perl=TRUE)
file2=sub('Phil\\.SRA\\.','',file2,perl=TRUE)
sampleB=sub('\\.ovary\\.inserts','',file2,perl=TRUE)

fcol = c('black','green','red')
pdfname=paste(outdir,'/','normalized_piRNA_abundance_', sampleA , '_', sampleB ,'.',nftype, '.jitterplot.pdf', sep='')
attach(abg)
limit=nrow(abg)
a=rep(1,limit)
boxes=data.frame((piRNA.y/nf2)/(piRNA.x/nf1),(piRNA_sense.y/nf2)/(piRNA_sense.x/nf1),(piRNA_antisense.y/nf2)/(piRNA_antisense.x/nf1))
detach(abg)
colnames(boxes)=c("total","sense","antisense")
boxes=melt(boxes,variable_name="g")
p=ggplot (aes(x=g,y=value,colour=g), data=boxes,ylab="changes in abundance by transposon family") 
p=p+layer(geom="jitter",alpha=I(1/2))
p=p+layer (geom="boxplot",colour=c("black") ,fill=c("lightyellow")) 
print(p)
ggsave(pdfname,width=7,height=7)
dev.off ()

pdfname=paste(outdir,'/','normalized_piRNA_abundance_', sampleA , '_', sampleB ,'.',nftype, '.boxplot.pdf', sep='')
m=paste(sampleA,"vs",sampleB,sep=" ")
boxplot (boxes, col=fcol,frame=F, axes=F, main=m,ylab="changes in abundance by transposon family",boxwex=0.25,at=c(1,1.5,2),outline=F)
axis(1, tck=0.01,at=seq(0,max(boxes),roundUp(max(max(boxes)/5))))
dev.off ()

attach(abg)
pdfname=paste(outdir,'/','normalized_piRNA_abundance_', sampleA , '_', sampleB ,'.',nftype, '.scatterplot.pdf', sep='')
plot (piRNA.x/nf1, piRNA.y/nf2, frame=F, axes=F, ylim=c(0,max(piRNA.x,piRNA.y)), xlim=c(0,max(piRNA.x,piRNA.y)), col='white',pch=21, bg=fcol[g], cex=1.5, xlab= sampleA, ylab= sampleB, main='normalized piRNA abundance by trn family') + abline (0,1,lty=2, col='darkgrey')
axis(1, tck=0.01,at=seq(0,max(piRNA.x,piRNA.y),roundUp(max(max(piRNA.x,piRNA.y)/10))))
axis(2, tck=0.01,at=seq(0,max(piRNA.x,piRNA.y),roundUp(max(max(piRNA.x,piRNA.y)/10))))
dev.off ()

#,piRNA_sense_fraction.y/piRNA_sense_fraction.x


detach(abg)


}



plot_transposon_abundance_senseFraction_comparison <- function (input,nftype,outdir) {

group=read.table("/home/wangw1/pipeline/common/Zamore.group",F)
colnames(group)=c("transposon","g")
 
L=read.table(input,T)
L$piRNA=as.numeric(L$piRNA)
L$piRNA_sense_fraction=as.numeric(as.character(L$piRNA_sense_fraction))
L$piRNA_sense=as.numeric(L$piRNA_sense)
L$piRNA_antisense=as.numeric(L$piRNA_antisense)
L$nf=as.numeric(as.character(L$nf))

file=basename(input)

#assuming only two files 
a=as.data.frame(lapply(subset(L,as.character(rank)==1),'[',drop=TRUE))
sampleA=levels( as.factor(a$gt) )[1]  #a long trip to get the gtname
sampleA=sub('\\.ovary\\.inserts','',sampleA,perl=TRUE)
sampleA=sub('Phil\\.SRA\\.','',sampleA,perl=TRUE)
b=as.data.frame(lapply(subset(L,as.character(rank)==2),'[',drop=TRUE))
sampleB=levels( as.factor(b$gt) )[1]
sampleB=sub('\\.ovary\\.inserts','',sampleB,perl=TRUE)
sampleB=sub('Phil\\.SRA\\.','',sampleB,perl=TRUE)
ab = merge (a,b,by.x='transposon', by.y='transposon')
abg = merge (ab, group, by.x='transposon', by.y='transposon')
abg = abg[complete.cases(abg[,c("piRNA_sense_fraction.x","piRNA_sense_fraction.y")]),]


abg$piRNA.x=abg$piRNA.x/abg$nf.x*1000000
abg$piRNA.y=abg$piRNA.y/abg$nf.y*1000000
abg$piRNA_sense.x=abg$piRNA_sense.x/abg$nf.x*1000000
abg$piRNA_sense.y=abg$piRNA_sense.y/abg$nf.y*1000000
abg$piRNA_antisense.x=abg$piRNA_antisense.x/abg$nf.x*1000000
abg$piRNA_antisense.y=abg$piRNA_antisense.y/abg$nf.y*1000000

#abundance jitterplot
test=paste(file,"jitterplot")
test
fcol = c('white','darkblue','darkred')
attach(abg)
boxes=data.frame((piRNA.y/piRNA.x),(piRNA_sense.y/piRNA_sense.x),(piRNA_antisense.y/piRNA_antisense.x))
detach(abg)
colnames(boxes)=c("total","sense","antisense")
boxes=melt(boxes,variable_name="g")
colnames(boxes)=c("g","foldChange")
pdfname=paste(outdir,'/','normalized_piRNA_abundance_', file , '.jitterplot.pdf', sep='')
t=paste(sampleB,"/",sampleA," (",nftype,") ",sep="")
p=ggplot (aes(x=g,y=foldChange,colour=g), data=boxes,ylab="fold changes in abundance by transposon family") 
p <- p + ggtitle(t)
p<-p + theme(plot.title = element_text(size = 12, colour = "black"))
p=p+layer(geom="jitter",alpha=I(1/2))
p=p+layer (geom="boxplot",colour=c("black") ) +scale_fill_manual(values=c("total"="black","sense"="darkblue","antisense"="darkred"))
print(p)
ggsave(pdfname,width=4.5,height=10)
dev.off ()

#abundance boxplot
test=paste(file,"boxplot")
test
attach(abg)
boxes=data.frame((piRNA.x/piRNA.y),(piRNA_sense.x/piRNA_sense.y),(piRNA_antisense.x/piRNA_antisense.y))
t=paste(sampleA,"/",sampleB," (",nftype,") ",sep="")
detach(abg)
colnames(boxes)=c("total","sense","antisense")
fcol = c('white','darkblue','darkred')
pdfname=paste(outdir,'/','normalized_piRNA_abundance_', file , '.boxplot.pdf', sep='')
pdf(pdfname,width=4.5,height=10)
boxplot (boxes, col=fcol,axes=F, names=c("total","sense","antisense"),main=t,ylab="fold changes in abundance by transposon family",boxwex=0.25,at=c(1,1.5,2))
abline(h=1,col="red",lty=6)
axis(2,las=2, tck=0.01,at=seq(0,max(boxes),roundUp( max(max(boxes)/10) ) ) )
axis(2, at=1, labels="1",las=2,col="red",col.ticks ="red")
mtext(1,at=0.6,text="total",col="black")
mtext(1,at=1.2,text="sense",col="darkblue")
mtext(1,at=1.8,text="antisense",col="darkred")
dev.off()


#abundance scatterplot
test=paste(file,"abundance scatterplot")
test
attach(abg)
fcol = c('black','green','red')
pdfname=paste(outdir,'/','normalized_piRNA_abundance_',file , '.scatterplot.pdf', sep='')
pdf(pdfname,width=7,height=7)
plot (piRNA.x, piRNA.y, frame=F, axes=F, ylim=c(0,max(piRNA.x,piRNA.y,8)), xlim=c(0,max(piRNA.x,piRNA.y,8)), col='white',pch=21, bg=fcol[g], cex=1.5, xlab= paste(sampleA,"(ppm)",sep=" "), ylab= paste(sampleB,"(ppm)",sep=" "), main=paste('normalized piRNA abundance( ',nftype, ' )by trn family',sep="")) + abline (0,1,lty=2, col='darkgrey')
axis(1,pos=c(0,0), tck=0.01,at=seq(0,max(piRNA.x,piRNA.y,8),roundUp(max(max(piRNA.x,piRNA.y,8)/5))))
axis(2, las=2,pos=c(0,0),tck=0.01,at=seq(0,max(piRNA.x,piRNA.y,8),roundUp(max(max(piRNA.x,piRNA.y,8)/5))))
dev.off ()

#clickme
#library(clickme)
#clickme(points, x = abg$piRNA.x, y = abg$piRNA.y,color_groups = abg$g ,names = abg$transposon,xlab = paste(sampleA,"(ppm)",sep=" "), ylab = paste(sampleB,"(ppm)",sep=" "))
#,extra = list(zscore=abg$zscore.x)


#piRNA_sense_fraction scatterplot
test=paste(file,"sense fraction scatterplot")
test
pdfname=paste(outdir,'/','normalized_piRNA_senseFraction_',file , '.scatterplot.pdf', sep='')
pdf(pdfname,width=7,height=7)
plot (piRNA_sense_fraction.x, piRNA_sense_fraction.y,  axes=F, ylim=c(0,1), xlim=c(0,1), col='white',pch=21, bg=fcol[g], cex=1.5, xlab= sampleA, ylab= sampleB, main='piRNA sense Fraction') + abline (0,1,lty=2, col='darkgrey')
axis(1,pos=c(0,0), tck=0.01,at=seq(0,1,0.2))
axis(2,las=2, pos=c(0,0),tck=0.01,at=seq(0,1,0.2))
dev.off ()

detach(abg)


}


plot_zscore_FB_scatterplot <- function (input,tzfile,prefix,outdir) {

group=read.table("/home/wangw1/pipeline/common/Zamore.group",F)
colnames(group)=c("transposon","g")
 
L=read.table(input,F)
colnames(L)=c("gt","transposon","pair","zscore","p10","rank")
L$zscore=as.numeric(L$zscore)
L$p10=as.numeric(L$p10)
file=basename(input)

#assuming only two files 
a=as.data.frame(lapply(subset(L,as.character(rank)==1),'[',drop=TRUE))
sampleA=levels( as.factor(a$gt) )[1]  #a long trip to get the gtname
sampleA=sub('\\.ovary\\.inserts','',sampleA,perl=TRUE)
sampleAa=sub('Phil\\.SRA\\.','',sampleA,perl=TRUE)
b=as.data.frame(lapply(subset(L,as.character(rank)==2),'[',drop=TRUE))
sampleB=levels( as.factor(b$gt) )[1]
sampleB=sub('\\.ovary\\.inserts','',sampleB,perl=TRUE)
sampleBb=sub('Phil\\.SRA\\.','',sampleB,perl=TRUE)
ab = merge (a,b,by.x='transposon', by.y='transposon')
abg = merge (ab, group, by.x='transposon', by.y='transposon')

Z=read.table(tzfile,F)
colnames(Z)=c("gt","tz")
ztemp=Z[grep(sampleAa,Z$gt,perl=TRUE),]$tz
sampleA=paste(sampleA,"(genome-wide zscore: " ,ztemp ,  ")", sep="" )
ztemp=Z[grep(sampleBb,Z$gt,perl=TRUE),]$tz
sampleB=paste(sampleB,"(genome-wide zscore: " , ztemp,  ")", sep="" )

fcol = c('black','green','red')

attach(abg)

pdfname=paste(outdir,'/',prefix, '.zscore.scatterplot.pdf', sep='')
pdf(pdfname,width=7,height=7)
plot (zscore.x, zscore.y,  axes=F, ylim=c(0,max(zscore.x,zscore.y)), xlim=c(0,max(zscore.x,zscore.y)), col='white',pch=21, bg=fcol[g], cex=1.5, xlab= sampleA, ylab= sampleB, main='Zscore ') + abline (0,1,lty=2, col='darkgrey')
axis(1,pos=c(0,0), tck=0.01,at=seq(0,max(zscore.x,zscore.y),roundUp( max(max(zscore.x,zscore.y)/10) )))
axis(2,las=2, pos=c(0,0),tck=0.01,at=seq(0,max(zscore.x,zscore.y),roundUp( max(max(zscore.x,zscore.y)/10) )))
dev.off ()

detach(abg)


}



plot_zscore_FB_smRNA_vs_DEG_scatterplot <- function (input,tzfile,prefix,outdir) {

group=read.table("/home/wangw1/pipeline/common/Zamore.group",F)
colnames(group)=c("transposon","g")
 
L=read.table(input,F)
colnames(L)=c("gt","transposon","pairs", "zscore", "p10", "ppReads1", "totalReads1", "ppRatio1", "ppReads2","totalReads2","ppRatio2","rank")
L$zscore=as.numeric(L$zscore)
L$p10=as.numeric(L$p10)
L$pairs=as.factor(L$pairs)
file=basename(input)


L$pairs=sub('Phil.DEG.*-Phil.DEG.*','DEG-DEG',L$pairs,perl=TRUE)
L$pairs=sub('Phil.SRA.*-Phil.DEG.*','SRA-DEG',L$pairs,perl=TRUE)
L$pairs=sub('Phil.SRA.*-Phil.SRA.*','SRA-SRA',L$pairs,perl=TRUE)
L$pairs=sub('Phil.DEG.*-Phil.SRA.*','DEG-SRA',L$pairs,perl=TRUE)
L$pairs=as.factor(L$pairs)


L$ppRatio1=as.numeric(sub('%','',L$ppRatio1,perl=TRUE))
L$ppRatio2=as.numeric(sub('%','',L$ppRatio2,perl=TRUE))

Z=read.table(tzfile,F)
colnames(Z)=c("gt","pairs", "zscore", "p10", "ppReads1", "totalReads1", "ppRatio1", "ppReads2","totalReads2","ppRatio2","rank")
Z$zscore=as.numeric(Z$zscore)
Z$p10=as.numeric(Z$p10)
Z$pairs=sub('Phil.DEG.*-Phil.DEG.*','DEG-DEG',Z$pairs,perl=TRUE)
Z$pairs=sub('Phil.SRA.*-Phil.DEG.*','SRA-DEG',Z$pairs,perl=TRUE)
Z$pairs=sub('Phil.SRA.*-Phil.SRA.*','SRA-SRA',Z$pairs,perl=TRUE)
Z$pairs=sub('Phil.DEG.*-Phil.SRA.*','DEG-SRA',Z$pairs,perl=TRUE)
Z$pairs=as.factor(Z$pairs)

Z$ppRatio1=as.numeric(sub('%','',Z$ppRatio1,perl=TRUE))
Z$ppRatio2=as.numeric(sub('%','',Z$ppRatio2,perl=TRUE))


pdfname=paste(outdir,'/',prefix, '.smRNA_vs_DEG_zscore.scatterplot.pdf', sep='')
pdf(pdfname,width=7,height=7)
par(mar=c(5,5,4,1))
par(mfcol = c(2, 2))

for ( i in 1:length(levels(L$pairs)) )
{
ppname=levels(L$pairs)[i]
pp=as.data.frame(lapply(subset(L,L$pairs==levels(L$pairs)[i]),'[',drop=TRUE))
#assuming only two files 
a=as.data.frame(lapply(subset(pp,as.character(rank)==1),'[',drop=TRUE))
sampleA=levels( as.factor(a$gt) )[1]  #a long trip to get the gtname
#sampleA=sub('\\.ovary\\.inserts','',sampleA,perl=TRUE)
#sampleAa=sub('Phil\\.SRA\\.','',sampleA,perl=TRUE)
b=as.data.frame(lapply(subset(pp,as.character(rank)==2),'[',drop=TRUE))
sampleB=levels( as.factor(b$gt) )[1]
#sampleB=sub('\\.ovary\\.inserts','',sampleB,perl=TRUE)
#sampleBb=sub('Phil\\.SRA\\.','',sampleB,perl=TRUE)
ab = merge (a,b,by.x='transposon', by.y='transposon')
abg = merge (ab, group, by.x='transposon', by.y='transposon')

totalpp=as.data.frame(lapply(subset(Z,Z$pairs==levels(L$pairs)[i]),'[',drop=TRUE))

ztemp=formatC(totalpp[grep(sampleA,totalpp$gt,perl=TRUE),]$zscore,2)

sampleA=paste(sampleA,"\n(genome-wide zscore: " ,ztemp ,  ")", sep="" )
ztemp=formatC(totalpp[grep(sampleB,totalpp$gt,perl=TRUE),]$zscore,2)
sampleB=paste(sampleB,"\n(genome-wide zscore: " , ztemp,  ")", sep="" )

fcol = c('black','green','red')

attach(abg)

m=paste("Zscore between",ppname)
plot (zscore.x, zscore.y,  axes=F, ylim=c(min(zscore.x,zscore.y,-1),max(zscore.x,zscore.y,10)), xlim=c(min(zscore.x,zscore.y,-1),max(zscore.x,zscore.y,10)), col='white',pch=21, bg=fcol[g], cex=1,  main=m) + abline (0,1,lty=2, col='darkgrey')
axis(1,pos=c(0,0), tck=0.01,at=seq(0,max(zscore.x,zscore.y,10),roundUp( max(max(zscore.x,zscore.y,10)/10) )))
axis(2,las=2, pos=c(0,0),tck=0.01,at=seq(0,max(zscore.x,zscore.y,10),roundUp( max(max(zscore.x,zscore.y,10)/10) )))
mtext(side = 1, text = sampleA, line = 3)
mtext(side = 2, text = sampleB, line = 2)
#xlab= sampleA, ylab= sampleB,
detach(abg)

}
dev.off ()
}